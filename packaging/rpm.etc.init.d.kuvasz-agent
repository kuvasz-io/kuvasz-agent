#! /usr/bin/env bash

# chkconfig: 2345 80 05
# description: Kuvasz agent
# processname: kuvasz-agent
# config: /etc/kuvasz-agent.ini
# pidfile: /var/run/kuvasz-agent.pid

### BEGIN INIT INFO
# Provides:          kuvasz-agent
# Required-Start:    $all
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start kuvasz-agent at boot time
### END INIT INFO

#  tested on
#  1. New lsb that define start-stop-daemon
#  3. Centos with initscripts package installed

PATH=/bin:/usr/bin:/sbin:/usr/sbin
NAME=kuvasz-agent
DESC="Kuvasz agent"

KUVASZ_USER=root
KUVASZ_GROUP=root
KUVASZ_HOME=/var/log/kuvasz
CONF_DIR=/etc
WORK_DIR=$KUVASZ_HOME
LOG_DIR=/var/log/kuvasz
CONF_FILE=$CONF_DIR/kuvasz-agent.ini
MAX_OPEN_FILES=10000
PID_FILE=/var/run/$NAME.pid
DAEMON=/usr/sbin/$NAME

if [ `id -u` -ne 0 ]; then
  echo "You need root privileges to run this script"
  exit 4
fi

if [ ! -x $DAEMON ]; then
  echo "Program not installed or not executable"
  exit 5
fi

#
# init.d / servicectl compatibility (openSUSE)
#
if [ -f /etc/rc.status ]; then
    . /etc/rc.status
    rc_reset
fi

#
# Source function library.
#
if [ -f /etc/rc.d/init.d/functions ]; then
    . /etc/rc.d/init.d/functions
fi

# overwrite settings from default file
[ -e /etc/sysconfig/$NAME ] && . /etc/sysconfig/$NAME

DAEMON_OPTS="--pidfile=${PID_FILE} --config=${CONF_FILE}"

function isRunning() {
  status -p $PID_FILE $NAME > /dev/null 2>&1
}

case "$1" in
  start)
    echo -n $"Starting $DESC: .... "

    isRunning
    if [ $? -eq 0 ]; then
      echo "Already running."
      exit 0
    fi

    # Prepare environment
    mkdir -p "$LOG_DIR" && chown "$KUVASZ_USER":"$KUVASZ_GROUP" "$LOG_DIR"
    touch "$PID_FILE" && chown "$KUVASZ_USER":"$KUVASZ_GROUP" "$PID_FILE"

    if [ -n "$MAX_OPEN_FILES" ]; then
      ulimit -n $MAX_OPEN_FILES
    fi

    # Start Daemon
    cd $KUVASZ_HOME
    su -s /bin/sh -c "nohup ${DAEMON} ${DAEMON_OPTS} >> /dev/null 3>&1 &" $KUVASZ_USER 2> /dev/null
    return=$?
    if [ $return -eq 0 ]
    then
      pidof ${DAEMON} > $PID_FILE
      sleep 1
      # check if pid file has been written two
      if ! [[ -s $PID_FILE ]]; then
        echo "FAILED"
        exit 1
      fi
      i=0
      timeout=10
      # Wait for the process to be properly started before exiting
      until { cat "$PID_FILE" | xargs kill -0; } >/dev/null 2>&1
      do
        sleep 1
        i=$(($i + 1))
        if [ $i -gt $timeout ]; then
          echo "FAILED"
          exit 1
        fi
      done
    fi

    echo "OK"
    exit $return
    ;;
  stop)
    echo -n "Stopping $DESC ..."

    if [ -f "$PID_FILE" ]; then
      killproc -p $PID_FILE -d 20 $NAME
      if [ $? -eq 1 ]; then
        echo -n "$DESC is not running but pid file exists, cleaning up"
      elif [ $? -eq 3 ]; then
        PID="`cat $PID_FILE`"
        echo -n "Failed to stop $DESC (pid $PID)"
        exit 1
      fi
      rm -f "$PID_FILE"
      echo "OK"
      exit 0
    else
      echo -n "(not running)"
    fi
    exit 0
    ;;
  status)
    status -p $PID_FILE $NAME
    exit $?
    ;;
  restart|force-reload)
    if [ -f "$PID_FILE" ]; then
      $0 stop
      sleep 1
    fi
    $0 start
    ;;
  *)
    echo -n "Usage: $0 {start|stop|restart|force-reload|status}"
    exit 3
    ;;
esac
